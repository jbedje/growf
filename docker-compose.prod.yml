version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: growf_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: growf_prod
      POSTGRES_USER: ${DB_USER:-growf_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - growf_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-growf_user} -d growf_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: growf_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_this_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: growf_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://${DB_USER:-growf_user}:${DB_PASSWORD:-change_this_password}@postgres:5432/growf_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-change_this_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGINS: https://growf2.cipme.ci
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SMTP_HOST: mail.smtp2go.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: growf@cipme.ci
      SMTP_PASS: ${SMTP_PASSWORD}
      EMAIL_FROM: growf@cipme.ci
      FRONTEND_URL: https://growf2.cipme.ci
      BACKEND_URL: https://growf2.cipme.ci/api
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: growf_frontend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production load balancing)
  nginx:
    image: nginx:alpine
    container_name: growf_nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - growf_network
    profiles:
      - with-nginx

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  growf_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16