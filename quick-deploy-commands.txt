# Quick Deploy Commands for GROWF
# Run these commands on your Contabo server (184.174.37.7)

# 1. Connect to server
ssh root@184.174.37.7

# 2. Install Docker and dependencies
apt update && apt upgrade -y
apt install -y docker.io docker-compose git nginx certbot python3-certbot-nginx ufw fail2ban curl wget

# 3. Create project structure
mkdir -p /opt/growf
cd /opt/growf

# 4. Create docker-compose.prod.yml
cat > docker-compose.prod.yml << 'EOF'
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: growf_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: growf_prod
      POSTGRES_USER: ${DB_USER:-growf_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - growf_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-growf_user} -d growf_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: growf_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_this_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: growf_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://${DB_USER:-growf_user}:${DB_PASSWORD:-change_this_password}@postgres:5432/growf_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-change_this_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGINS: https://growf2.cipme.ci
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SMTP_HOST: mail.smtp2go.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: growf@cipme.ci
      SMTP_PASS: ${SMTP_PASSWORD}
      EMAIL_FROM: growf@cipme.ci
      FRONTEND_URL: https://growf2.cipme.ci
      BACKEND_URL: https://growf2.cipme.ci/api
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: growf_frontend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - growf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: growf_nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - growf_network
    profiles:
      - with-nginx

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  growf_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
EOF

# 5. Create environment file
cat > .env << 'EOF'
# Production Environment Configuration
DB_USER=growf_user
DB_PASSWORD=your_secure_db_password_here
DB_PORT=5432
REDIS_PASSWORD=your_secure_redis_password_here
REDIS_PORT=6379
JWT_SECRET=your_very_secure_jwt_secret_here_at_least_32_characters_long
JWT_REFRESH_SECRET=your_very_secure_refresh_secret_here_at_least_32_characters_long
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
SMTP_PASSWORD=Cipme@2024
BACKEND_PORT=3005
FRONTEND_PORT=80
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
VITE_API_URL=https://growf2.cipme.ci/api
COMPOSE_PROFILES=with-nginx
EOF

# 6. Edit the environment file with your secure values
nano .env

# 7. Configure firewall
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# 8. Get SSL certificate
certbot --nginx -d growf2.cipme.ci --non-interactive --agree-tos --email admin@cipme.ci

# 9. Create SSL directory for Docker
mkdir -p nginx/ssl/live/growf2.cipme.ci
cp /etc/letsencrypt/live/growf2.cipme.ci/fullchain.pem nginx/ssl/live/growf2.cipme.ci/
cp /etc/letsencrypt/live/growf2.cipme.ci/privkey.pem nginx/ssl/live/growf2.cipme.ci/

# 10. Clone your frontend and backend code (or upload manually)
# Since you have auth issues, upload your source code manually to:
# /opt/growf/frontend/ (all React frontend files)
# /opt/growf/backend/ (all Node.js backend files)

# 11. Deploy the application
docker-compose -f docker-compose.prod.yml up -d --build

# 12. Initialize database (wait 30 seconds first)
sleep 30
docker-compose -f docker-compose.prod.yml exec backend npm run db:push
docker-compose -f docker-compose.prod.yml exec backend npm run db:seed

# 13. Create superadmin account
docker-compose -f docker-compose.prod.yml exec backend npm run create:superadmin

# 14. Check status
docker-compose -f docker-compose.prod.yml ps
curl -f https://growf2.cipme.ci/health

echo "Deployment complete! Access your app at https://growf2.cipme.ci"